image:
  repository: trinodb/trino
  tag: 447
  pullPolicy: IfNotPresent
server:
  workers: 3
  exchangeManager:
    name: filesystem
    baseDir: "s3://${exchange_bucket_id}"
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
  config:
    query:
      maxMemory: "40GB"
service:
  type: ClusterIP
  port: 8080
coordinator:
  jvm:
    maxHeapSize: "8G"
  config:
    query:
      maxMemoryPerNode: "4GB"
  nodeSelector:
    NodePool: trino-karpenter
    karpenter.sh/capacity-type: on-demand
worker:
  jvm:
    maxHeapSize: "8G"
  config:
    query:
      maxMemoryPerNode: "4GB"
  resources:
    requests:
      cpu: 2000m
      memory: 10Gi
  nodeSelector:
    NodePool: trino-karpenter
    karpenter.sh/capacity-type: spot
additionalConfigProperties:
  - "retry-policy=TASK"
  - "exchange.compression-enabled=true"
  - "query.low-memory-killer.delay=0s"
  - "query.remote-task.max-error-duration=1m"
  - "query.hash-partition-count=50"
additionalExchangeManagerProperties:
  - "exchange.s3.region=${region}"
  - "exchange.s3.iam-role=${irsa_arn}"
additionalCatalogs:
  hive: |-
    connector.name=hive
    hive.metastore=glue
    hive.metastore.glue.region=${region}
    hive.metastore.glue.default-warehouse-dir=s3://${bucket_id}/
    hive.metastore.glue.iam-role=${irsa_arn}
    hive.s3.iam-role=${irsa_arn}
    hive.security=allow-all
  iceberg: |-
    connector.name=iceberg
    iceberg.catalog.type=glue
    iceberg.file-format=PARQUET
    iceberg.unique-table-location=true
    iceberg.register-table-procedure.enabled=true
    hive.metastore.glue.region=${region}
    hive.metastore.glue.default-warehouse-dir=s3://${bucket_id}/
    hive.s3.path-style-access=true
    hive.metastore.glue.iam-role=${irsa_arn}
    hive.s3.iam-role=${irsa_arn}
serviceAccount:
  create: true
  name: ${sa}
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internal
  hosts:
  - paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: trino
            port:
              number: 8080
jmx:
  enabled: true
  registryPort: 9080
  serverPort: 9081
  exporter:
    # jmx.exporter.enabled -- Set to true to export JMX Metrics via HTTP for [Prometheus](https://github.com/prometheus/jmx_exporter) consumption
    enabled: true
    image: bitnami/jmx-exporter:latest
    pullPolicy: Always
    port: 5556
    configProperties: |-
      hostPort: localhost:{{- .Values.jmx.registryPort }}
      startDelaySeconds: 0
      ssl: false
      lowercaseOutputName: false
      lowercaseOutputLabelNames: false
      whitelistObjectNames: ["trino.execution:name=QueryManager","trino.execution:name=SqlTaskManager","trino.execution.executor:name=TaskExecutor","trino.memory:name=ClusterMemoryManager","java.lang:type=Runtime","trino.memory:type=ClusterMemoryPool,name=general","java.lang:type=Memory","trino.memory:type=MemoryPool,name=general"]
      autoExcludeObjectNameAttributes: true
      excludeObjectNameAttributes:
        "java.lang:type=OperatingSystem":
          - "ObjectName"
        "java.lang:type=Runtime":
          - "ClassPath"
          - "SystemProperties"
      rules:
      - pattern: ".*"        
    resources: 
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 512Mi

serviceMonitor:
  enabled: true
  labels:
    prometheus: kube-prometheus
  interval: "30s"
  coordinator: 
    enabled: true
    labels:
      prometheus: kube-prometheus
  worker:
    enabled: true
    labels:
      prometheus: kube-prometheus
